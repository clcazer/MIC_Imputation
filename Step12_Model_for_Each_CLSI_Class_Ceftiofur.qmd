---
title: "Model_for_Each_CLSI_Class"
format: html
editor: visual
---

# Ceftiofur (TIO)

-   CLSI Class: cephems

    ## Filtering Ceftiofur isolates

    ##### Filtering TIOkacin isolates into a separate dataframe to build RF

    ```{r}
    TIO.RF.df <- NARMSCattleCombined_ordinal

    #checking if there are any NAs for TIO variable in this dataframe  
    (sum(is.na(TIO.RF.df[94]))/nrow(TIO.RF.df)*100) #returns 51.72%

    #further filter dataframe to only include isolates with TIO data 
    TIO.RF.df <- TIO.RF.df %>%      
      filter(!is.na(TIO))    

    #checking again to see if there are any NAs for TIO in dataframe  
    (sum(is.na(TIO.RF.df[94]))/nrow(TIO.RF.df)*100) #returns 0, so no missing values now

    ```

    ##### Check dependent variable (what predicting) is a factor in dataframe

    ```{r}
    is.factor(TIO.RF.df$TIO) #returns true
    ```

    ##### Make all categorical variables in dataframe factors

    ```{r}
    CategoricalVar<-c("STATE", "Year", "Month", "RAISING_CLAIM", "COUNTRY_OF_ORIGIN", "SOURCE", "SOURCE_SPECIES_INFO", "BRAND", "BRAND_NAME", "dataset_source", "MEAT_TYPE", "HOST_SPECIES")  

    TIO.RF.df[CategoricalVar]<-lapply(TIO.RF.df[CategoricalVar], factor) 

    remove(CategoricalVar)  
    #Resist.Genes variables (ex: TIOnoglycoside.Resist.Genes), GENOTYPE were not included in model because majority of isolates do not have this information 
    ```

    ## Missing Data Analysis for Antimicrobials

    ##### For each AM, what percentage of total number of isolates were tested against that AM

    ```{r}
    MissingDataAnalysis_AMs(TIO.RF.df)
    ```

|         |                 |
|---------|-----------------|
| **AMC** | **100.0000000** |
| **AXO** | **100.0000000** |
| **CHL** | **100.0000000** |
| **CIP** | **100.0000000** |
| **COT** | **100.0000000** |
| **FOX** | **100.0000000** |
| **GEN** | **100.0000000** |
| **NAL** | **100.0000000** |
| **TET** | **100.0000000** |
| TIO     | 100.0000000     |
| **AMP** | **99.9823165**  |
| Str     | 99.9646331      |
| FIS     | 89.3722370      |
| KAN     | 66.7020336      |
| AZI     | 54.5181256      |
| AMI     | 45.4818744      |
| CEP     | 10.6277630      |
| SMX     | 10.6277630      |
| ATM     | 0.1061008       |
| CAZ     | 0.1061008       |
| CTX     | 0.1061008       |
| FEP     | 0.1061008       |
| IMI     | 0.1061008       |
| PTZ     | 0.1061008       |
| APR     | 0.0000000       |
| CLI     | 0.0000000       |
| DAP     | 0.0000000       |
| DOX     | 0.0000000       |
| ERY     | 0.0000000       |
| FFN     | 0.0000000       |
| LIN     | 0.0000000       |
| LZD     | 0.0000000       |
| MER     | 0.0000000       |
| NIT     | 0.0000000       |
| PEN     | 0.0000000       |
| QDA     | 0.0000000       |
| TEL     | 0.0000000       |
| TGC     | 0.0000000       |
| TYL     | 0.0000000       |
| VAN     | 0.0000000       |

10 predictor variables tested on \>90% isolates and so can be used in model (not using Str because of change in concentrations tested over time)

## Missing Data Analysis for Categorical Variables

##### For each categorical variable, what percentage of total number of isolates were tested against that variable

```{r}
MissingDataAnalysis_CategoricalVar(TIO.RF.df)
```

| **Variable Name** | **Percent_of_Isolates_Tested** |
|:------------------|:-------------------------------|

|                     |                 |
|---------------------|-----------------|
| Month               | 100.0000000     |
| **Year**            | **100.0000000** |
| **dataset_source**  | **100.0000000** |
| **SOURCE**          | **100.0000000** |
| **HOST_SPECIES**    | **100.0000000** |
| ACQUISITION_DATE    | 99.8762157      |
| STATE               | 65.6940760      |
| GROWTH              | 65.6940760      |
| MEAT_TYPE           | 65.6940760      |
| BRAND_NAME          | 60.6012378      |
| BRAND               | 59.0981432      |
| SOURCE_SPECIES_INFO | 53.2802829      |
| CUTS                | 34.1114058      |
| COUNTRY_OF_ORIGIN   | 11.6003537      |
| RAISING_CLAIM       | 0.8311229       |
| GENOTYPE            | 0.0000000       |

##### Checking Levels for Categorical Variables with 90% plus data:

```{r}
levels(TIO.RF.df$Year)
```

```{r}
levels(TIO.RF.df$dataset_source)
```

```{r}
levels(TIO.RF.df$SOURCE)
```

```{r}
levels(TIO.RF.df$HOST_SPECIES)
```

Possible Categorical Variable Predictor Variables: (have enough data filled in and have unique levels)

-   Year
-   SOURCE

## Create 70% Training 30% Testing Split

```{r}
#set a random seed and shuffle data frame to get random sample of data in both the testing and training set   
set.seed(1234)   
TIO.RF.df<-TIO.RF.df[sample(1:nrow(TIO.RF.df)), ]
```

```{r}
#use 70% data for training and other 30% for testing

# get the number 70/30 training test split   
numberOfTrainingSamples <- round(length(TIO.RF.df$TIO) * .7) 

# training data   
set.seed(1234)   
trainTIORF <- TIO.RF.df[1:numberOfTrainingSamples,]  
trainTIORF_labels <- TIO.RF.df$TIO[1:numberOfTrainingSamples]  

# testing data  
set.seed(1234)  
testTIORF <- TIO.RF.df[-(1:numberOfTrainingSamples),]   
testTIORF_labels <-TIO.RF.df$TIO[-(1:numberOfTrainingSamples)]

remove(numberOfTrainingSamples)
```

## Balancing TIO Levels

##### Look at original training data distribution

```{r}
table(trainTIORF$TIO)
```

##### Try oversampling

```{r}
#Oversample to balance all MIC categories  
set.seed(1234)
over.TIO.RF.df<- RandOverClassif(TIO~., trainTIORF, "balance")  #"balance" tries to balance all existing classes    

table(over.TIO.RF.df$TIO) #This oversamples other categories so that there are 2059 rows (number of observations of majority category) for each
```

##### Try a mix of undersampling and oversampling

```{r}
#Undersample MIC category 0.125, 0.25, 0.5  
set.seed(1234)
C.perc= list("0.125"=0.5, "0.25"=0.08, "0.5"=0.05)  
under_over.TIO.RF.df<- RandUnderClassif(TIO~., trainTIORF, C.perc)   
table(under_over.TIO.RF.df$TIO) #first undersample  

#Oversample MIC category 1-8
set.seed(1234)
C.perc= list("1"=2, "2"=13, "4"=15, "8"=3.5)  
under_over.TIO.RF.df<- RandOverClassif(TIO~., under_over.TIO.RF.df, C.perc)   
table(under_over.TIO.RF.df$TIO) #then oversample
```

## Random Forest:

### Original

##### Build RF using Training Data:

```{r}
set.seed(71)  
RFTIO<-randomForest(TIO~Year+SOURCE+AMC+AXO+CHL+CIP+COT+FOX+GEN+NAL+TET+AMP, data=trainTIORF, na.action=na.exclude, ntree=500, importance=TRUE)  
RFTIO  
#27% OOB estimate of error rate  
#ntree=500  
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power  
pre.or <- sort(RFTIO$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable 
pre.or  
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score  
varImpPlot(RFTIO, main="")
```

-   Strongest predictors

    -   ampicillin (penicillin)
    -   cefoxitin (cephem)
    -   amoxicilin (B-lactam)

##### Prediction on Training Data

```{r}
set.seed(71)
trainRFTIO_prediction<- predict(RFTIO,trainTIORF)   
trainconMatTIORF<-confusionMatrix(trainRFTIO_prediction, trainTIORF$TIO)
trainconMatTIORF$table  
paste('Accuracy =', round(trainconMatTIORF$overall["Accuracy"],2)) #returns accuracy
trainconMatTIORF$overall #also gives accuracy in output in scientific notation   #accuracy is now 84% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
testRFTIO_prediction<-predict(RFTIO,testTIORF) 
testConMatTIORF<-confusionMatrix(testRFTIO_prediction,testTIORF$TIO) 
paste('Accuracy =', round(testConMatTIORF$overall["Accuracy"],2)) #returns accuracy #accuracy is 73% on test data

TIO_RF_ConMat<-testConMatTIORF$table  #saves just the confusion matrix as an object for future analysis 

testConMatTIORF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(TIO_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|       |           |
|-------|-----------|
| 0.125 | 0.4526316 |
| 0.25  | 0.7532097 |
| 0.5   | 0.7670915 |
| 1     | 0.1000000 |
| 2     | 0.0000000 |
| 4     | 0.0000000 |
| 8     | 0.7857143 |

##### Balanced Accuracy:

```{r}
TIO_RF_AccStats<-testConMatTIORF$byClass      
Balanced.Accuracy<-data.matrix(TIO_RF_AccStats[,"Balanced Accuracy"])     
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|                  |           |
|-----------------:|-----------|
| **Class: 0.125** | 0.7182009 |
|  **Class: 0.25** | 0.7536129 |
|   **Class: 0.5** | 0.7786297 |
|     **Class: 1** | 0.5491055 |
|     **Class: 2** | 0.5000000 |
|     **Class: 4** | 0.5000000 |
|     **Class: 8** | 0.8922630 |

##### Plus or Minus One Accuracy:

```{r}
PlusorMinus1_ConMat_Accuracy(TIO_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|       |           |
|-------|-----------|
| 0.125 | 0.9684211 |
| 0.25  | 1.0000000 |
| 0.5   | 0.9976825 |
| 1     | 1.0000000 |
| 2     | 0.0000000 |
| 4     | 0.5000000 |
| 8     | 0.7857143 |

```{r}
PlusorMinus1_overall(TIO_RF_ConMat)
```

##### NARMS Breakpoint Classification Accuracy:

```{r}
BreakpointClassificationAccuracy(TIO_RF_ConMat, 4)
```

##### ECOFF Breakpoint Classification Accuracy:

```{r}
BreakpointClassificationAccuracy(TIO_RF_ConMat, 1)
```

##### Major and Minor Error

```{r}
MajorandMinorError(TIO_RF_ConMat, 4)
```

### Oversampling

##### Build RF using Training Data:

```{r}
set.seed(71)   
RFTIO<-randomForest(TIO~Year+SOURCE+AMC+AXO+CHL+CIP+COT+FOX+GEN+NAL+TET+AMP, data=over.TIO.RF.df, na.action=na.exclude, ntree=500, importance=TRUE)   
RFTIO   
#8% OOB estimate of error rate   
#ntree=500   
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power   
pre.or <- sort(RFTIO$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable  
pre.or   
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score   
varImpPlot(RFTIO, main="")
```

-   Strongest predictors

    -   year

    -   cefoxitin (FOX)

##### Prediction on Training Data

```{r}
set.seed(71)
trainRFTIO_prediction<- predict(RFTIO,over.TIO.RF.df)    
trainconMatTIORF<-confusionMatrix(trainRFTIO_prediction, over.TIO.RF.df$TIO)
trainconMatTIORF$table   
 
trainconMatTIORF$overall #also gives accuracy in output in scientific notation   #accuracy is now 94% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
testRFTIO_prediction<-predict(RFTIO,testTIORF)  
testConMatTIORF<-confusionMatrix(testRFTIO_prediction,testTIORF$TIO)  
paste('Accuracy =', round(testConMatTIORF$overall["Accuracy"],2)) #returns accuracy #accuracy is 70% on test data    
TIO_RF_ConMat<-testConMatTIORF$table  #saves just the confusion matrix as an object for future analysis
    
testConMatTIORF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(TIO_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|       |           |
|-------|-----------|
| 0.125 | 0.7157895 |
| 0.25  | 0.7032810 |
| 0.5   | 0.7137891 |
| 1     | 0.1500000 |
| 2     | 0.5000000 |
| 4     | 0.5000000 |
| 8     | 0.8571429 |

##### Balanced Accuracy:

```{r}
TIO_RF_AccStats<-testConMatTIORF$byClass       
Balanced.Accuracy<-data.matrix(TIO_RF_AccStats[,"Balanced Accuracy"])      
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|                  |           |
|-----------------:|-----------|
| **Class: 0.125** | 0.8313654 |
|  **Class: 0.25** | 0.7336686 |
|   **Class: 0.5** | 0.7693646 |
|     **Class: 1** | 0.5663536 |
|     **Class: 2** | 0.7485251 |
|     **Class: 4** | 0.7491150 |
|     **Class: 8** | 0.9285714 |

##### Plus or Minus One Accuracy:

```{r}
PlusorMinus1_ConMat_Accuracy(TIO_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|       |           |
|-------|-----------|
| 0.125 | 0.9684211 |
| 0.25  | 0.9885877 |
| 0.5   | 0.9884125 |
| 1     | 1.0000000 |
| 2     | 1.0000000 |
| 4     | 0.5000000 |
| 8     | 0.9285714 |

```{r}
PlusorMinus1_overall(TIO_RF_ConMat)
```

##### NARMS Breakpoint Classification Accuracy:

```{r}
BreakpointClassificationAccuracy(TIO_RF_ConMat, 4)
```

##### ECOFF Breakpoint Classification Accuracy:

```{r}
BreakpointClassificationAccuracy(TIO_RF_ConMat, 1)
```

##### Major and Minor Error

```{r}
MajorandMinorError(TIO_RF_ConMat, 4)
```

### BEST MODEL: Mix of Under and Over

##### Build RF using Training Data:

```{r}
set.seed(71)   
final_RFTIO<-randomForest(TIO~Year+AMC+AXO+CHL+CIP+COT+FOX+GEN+NAL+TET+AMP, data=under_over.TIO.RF.df, na.action=na.exclude, ntree=500, importance=TRUE)   
final_RFTIO   
#23% OOB estimate of error rate
#ntree=500   
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power   
pre.or <- sort(final_RFTIO$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable  
pre.or   
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score   
varImpPlot(final_RFTIO, main="")
```

-   Strongest predictors

    -   cefoxitin (another cephem)

    -   ceftriaxone (another cephem)

##### Prediction on Training Data

```{r}
set.seed(71)
final_trainRFTIO_prediction<- predict(final_RFTIO,under_over.TIO.RF.df)    
final_trainconMatTIORF<-confusionMatrix(final_trainRFTIO_prediction, under_over.TIO.RF.df$TIO)
final_trainconMatTIORF$table   
final_trainconMatTIORF$overall #also gives accuracy in output in scientific notation   
#accuracy on training data is 94%
```

##### Prediction on Test Data:

```{r}
set.seed(71)
final_testRFTIO_prediction<-predict(final_RFTIO,testTIORF)  
final_testConMatTIORF<-confusionMatrix(final_testRFTIO_prediction,testTIORF$TIO)  
paste('Accuracy =', round(final_testConMatTIORF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 61% on test data

final_TIO_RF_ConMat<-final_testConMatTIORF$table  #saves just the confusion matrix as an object for future analysis
    
final_testConMatTIORF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(final_TIO_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|       |           |
|-------|-----------|
| 0.125 | 0.8000000 |
| 0.25  | 0.5891583 |
| 0.5   | 0.6013905 |
| 1     | 0.4500000 |
| 2     | 0.5000000 |
| 4     | 0.5000000 |
| 8     | 0.8571429 |

##### Balanced Accuracy:

```{r}
TIO_RF_AccStats<-final_testConMatTIORF$byClass       
Balanced.Accuracy<-data.matrix(TIO_RF_AccStats[,"Balanced Accuracy"])      
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|                  |           |
|-----------------:|-----------|
| **Class: 0.125** | 0.8559925 |
|  **Class: 0.25** | 0.6675711 |
|   **Class: 0.5** | 0.7023739 |
|     **Class: 1** | 0.7011479 |
|     **Class: 2** | 0.7435103 |
|     **Class: 4** | 0.7482301 |
|     **Class: 8** | 0.9285714 |

##### Plus or Minus One Accuracy by Category:

```{r}
PlusorMinus1_ConMat_Accuracy(final_TIO_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|       |           |
|-------|-----------|
| 0.125 | 0.9684211 |
| 0.25  | 0.9743224 |
| 0.5   | 0.9559676 |
| 1     | 0.9500000 |
| 2     | 1.0000000 |
| 4     | 1.0000000 |
| 8     | 0.9285714 |

##### Plus or Minus One Accuracy Overall:

```{r}
PlusorMinus1_overall(final_TIO_RF_ConMat)
```

##### NARMS Breakpoint Classification Accuracy:

```{r}
BreakpointClassificationAccuracy(final_TIO_RF_ConMat, 4)
```

##### ECOFF Breakpoint Classification Accuracy:

```{r}
BreakpointClassificationAccuracy(final_TIO_RF_ConMat, 1)
```

##### Major and Minor Error

```{r}
MajorandMinorError(final_TIO_RF_ConMat, 4)
```

```{r}
remove(RFTIO, trainconMatTIORF, trainRFTIO_prediction, testRFTIO_prediction, testConMatTIORF, TIO_RF_ConMat, C.perc, TIO_RF_AccStats, Balanced.Accuracy )

remove(over.TIO.RF.df, under_over.TIO.RF.df, final_trainconMatTIORF, final_trainRFTIO_prediction, trainTIORF_labels)
```
