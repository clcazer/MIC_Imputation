---
title: "Model_for_Each_CLSI_Class"
format: html
editor: visual
---

# Sulfisoxazole (FIS)

-   CLSI Class: folate pathway agonist

    ## Filtering FIS isolates

    ##### Filtering FIS isolates into a separate dataframe to build RF

    ```{r}
    FIS.RF.df <- NARMSCattleCombined_ordinal

    #checking if there are any NAs for AMI variable in this dataframe  
    (sum(is.na(FIS.RF.df[58]))/nrow(FIS.RF.df)*100) #returns 5%  

    #further filter dataframe to only include isolates with FIS data 
    FIS.RF.df <- FIS.RF.df %>%      
      filter(!is.na(FIS))    

    #checking again to see if there are any NAs for FIS in dataframe  
    (sum(is.na(FIS.RF.df[58]))/nrow(FIS.RF.df)*100) #returns 0, so no missing values now

    ```

    ##### Check dependent variable (what predicting) is a factor in dataframe

    ```{r}
    is.factor(FIS.RF.df$FIS) #returns true
    ```

    ##### Make all categorical variables in dataframe factors

    ```{r}
    CategoricalVar<-c("STATE", "Year", "Month", "RAISING_CLAIM", "COUNTRY_OF_ORIGIN", "SOURCE", "SOURCE_SPECIES_INFO", "BRAND", "BRAND_NAME", "dataset_source", "MEAT_TYPE", "HOST_SPECIES")  

    FIS.RF.df[CategoricalVar]<-lapply(FIS.RF.df[CategoricalVar], factor) 

    remove(CategoricalVar)  
    #Resist.Genes variables (ex: Aminoglycoside.Resist.Genes), GENOTYPE were not included in model because majority of isolates do not have this information 
    ```

    ## Missing Data Analysis for Antimicrobials

    ##### For each AM, what percentage of total number of isolates were tested against that AM

    ```{r}
    MissingDataAnalysis_AMs(FIS.RF.df)
    ```

|         |                  |
|---------|------------------|
| **AMC** | **100.00000000** |
| **AXO** | **100.00000000** |
| **CHL** | **100.00000000** |
| **CIP** | **100.00000000** |
| **COT** | **100.00000000** |
| FIS     | 100.00000000     |
| **FOX** | **100.00000000** |
| **GEN** | **100.00000000** |
| **NAL** | **100.00000000** |
| **TET** | **100.00000000** |
| **AMP** | **99.99100072**  |
| Str     | 99.98200144      |
| AZI     | 82.26241901      |
| MER     | 54.51763859      |
| TIO     | 45.48236141      |
| KAN     | 28.53671706      |
| AMI     | 17.73758099      |
| ATM     | 0.05399568       |
| CAZ     | 0.05399568       |
| CTX     | 0.05399568       |
| FEP     | 0.05399568       |
| IMI     | 0.05399568       |
| PTZ     | 0.05399568       |
| APR     | 0.00000000       |
| CEP     | 0.00000000       |
| CLI     | 0.00000000       |
| DAP     | 0.00000000       |
| DOX     | 0.00000000       |
| ERY     | 0.00000000       |
| FFN     | 0.00000000       |
| LIN     | 0.00000000       |
| LZD     | 0.00000000       |
| NIT     | 0.00000000       |
| PEN     | 0.00000000       |
| QDA     | 0.00000000       |

10 predictor variables tested on \>90% isolates and so can be used in model (Str excluded as predictor variable because of concentration change in 2014)

## Missing Data Analysis for Categorical Variables

##### For each categorical variable, what percentage of total number of isolates were tested against that variable

```{r}
MissingDataAnalysis_CategoricalVar(FIS.RF.df)
```

| **Variable Name** | **Percent_of_Isolates_Tested** |
|:------------------|:-------------------------------|

|                     |                |
|---------------------|----------------|
| **Year**            | **100.000000** |
| **dataset_source**  | **100.000000** |
| **SOURCE**          | **100.000000** |
| **HOST_SPECIES**    | **100.000000** |
| ACQUISITION_DATE    | 99.838013      |
| Month               | 87.562995      |
| SOURCE_SPECIES_INFO | 77.888769      |
| STATE               | 35.790137      |
| GROWTH              | 35.790137      |
| MEAT_TYPE           | 35.790137      |
| BRAND               | 33.288337      |
| BRAND_NAME          | 33.261339      |
| CUTS                | 17.512599      |
| COUNTRY_OF_ORIGIN   | 12.212023      |
| GENOTYPE            | 10.538157      |
| RAISING_CLAIM       | 4.724622       |

##### Checking Levels for Categorical Variables with 90% plus data:

```{r}
levels(FIS.RF.df$Year)
```

```{r}
levels(FIS.RF.df$dataset_source)
```

```{r}
levels(FIS.RF.df$SOURCE)
```

```{r}
levels(FIS.RF.df$HOST_SPECIES)
```

Possible Categorical Variable Predictor Variables: (have enough data filled in and have unique levels)

-   Year
-   SOURCE

## Create 70% Training 30% Testing Split

```{r}
#set a random seed and shuffle data frame to get random sample of data in both the testing and training set   
set.seed(1234)   
FIS.RF.df<-FIS.RF.df[sample(1:nrow(FIS.RF.df)), ]
```

```{r}
#use 70% data for training and other 30% for testing

# get the number 70/30 training test split   
numberOfTrainingSamples <- round(length(FIS.RF.df$FIS) * .7) 

# training data   
set.seed(1234)   
trainFISRF <- FIS.RF.df[1:numberOfTrainingSamples,]  
trainFISRF_labels <- FIS.RF.df$FIS[1:numberOfTrainingSamples] 

# testing data  
set.seed(1234)  
testFISRF <- FIS.RF.df[-(1:numberOfTrainingSamples),]   
testFISRF_labels <-FIS.RF.df$FIS[-(1:numberOfTrainingSamples)]  

remove(numberOfTrainingSamples)
```

## Balancing COT Levels

##### Look at original training data distribution

```{r}
table(trainFISRF$FIS)
```

##### Try oversampling

```{r}
#Oversample to balance all MIC categories  
set.seed(71)
over.FIS.RF.df<- RandOverClassif(FIS~., trainFISRF, "balance")  #"balance" tries to balance all existing classes    

table(over.FIS.RF.df$FIS) #This oversamples other categories so that there are 6031 rows (number of observations of majority category) for each
```

##### Try a mix of undersampling and oversampling

```{r}
#Undersample MIC category 16  
set.seed(71)
C.perc= list("16"=0.15)  
under_over.FIS.RF.df<- RandUnderClassif(FIS~., trainFISRF, C.perc)   
table(under_over.FIS.RF.df$FIS) #first undersample  

#Oversample MIC category 64, 128 
set.seed(71)
C.perc= list("64"=25, "128"=19)  
under_over.FIS.RF.df<- RandOverClassif(FIS~., under_over.FIS.RF.df, C.perc)   
table(under_over.FIS.RF.df$FIS) #then oversample
```

## Random Forest:

### Original

##### Build RF using Training Data:

```{r}
set.seed(71)  
RFFIS<-randomForest(FIS~Year+SOURCE+AMC+AXO+CHL+CIP+COT+FOX+GEN+NAL+TET+AMP, data=trainFISRF, na.action=na.exclude, ntree=500, importance=TRUE)  
RFFIS  
#14.34% OOB estimate of error rate  
#ntree=500  
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power  
pre.or <- sort(RFFIS$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable 
pre.or  
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score  
varImpPlot(RFFIS, main="")
```

-   Strongest predictors

    -   Trimethoprim-sulfamethoxazole (another folate pathway agonist)

##### Prediction on Training Data

```{r}
set.seed(71)
trainRFFIS_prediction<- predict(RFFIS,trainFISRF)   
trainconMatFISRF<-confusionMatrix(trainRFFIS_prediction, trainFISRF$FIS)
trainconMatFISRF$table  
paste('Accuracy =', round(trainconMatFISRF$overall["Accuracy"],2)) #returns accuracy
trainconMatFISRF$overall #also gives accuracy in output in scientific notation   #accuracy is now 88% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
testRFFIS_prediction<-predict(RFFIS,testFISRF) 
testConMatFISRF<-confusionMatrix(testRFFIS_prediction,testFISRF$FIS) 
paste('Accuracy =', round(testConMatFISRF$overall["Accuracy"],2)) #returns accuracy #accuracy is 86% on test data   

FIS_RF_ConMat<-testConMatFISRF$table  #saves just the confusion matrix as an object for future analysis 

testConMatFISRF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(FIS_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |            |
|-----|------------|
| 16  | 0.99146625 |
| 32  | 0.01971831 |
| 64  | 0.00000000 |
| 128 | 0.00000000 |
| 256 | 0.75979112 |

##### Balanced Accuracy:

```{r}
FIS_RF_AccStats<-testConMatFISRF$byClass      
Balanced.Accuracy<-data.matrix(FIS_RF_AccStats[,"Balanced Accuracy"])     
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|                |           |
|---------------:|-----------|
|  **Class: 16** | 0.6967913 |
|  **Class: 32** | 0.5090199 |
|  **Class: 64** | 0.5000000 |
| **Class: 128** | 0.5000000 |
| **Class: 256** | 0.8759986 |

##### Plus or Minus One Accuracy:

```{r}
PlusorMinus1_ConMat_Accuracy(FIS_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |            |
|-----|------------|
| 16  | 0.99301784 |
| 32  | 0.99154930 |
| 64  | 0.06666667 |
| 128 | 0.00000000 |
| 256 | 0.75979112 |

```{r}
PlusorMinus1_overall(FIS_RF_ConMat)
```

#Breakpoint Classification Accuracy and Major and Minor Error Cannot be computed since the NARMS breakpoint value is at the end boundary (all isolates are susceptible)

### Oversampling to balance all categories

##### Build RF using Training Data:

```{r}
set.seed(71)  
RFFIS<-randomForest(FIS~Year+SOURCE+AMC+AXO+CHL+CIP+COT+FOX+GEN+NAL+TET+AMP, data=over.FIS.RF.df, na.action=na.exclude, ntree=500, importance=TRUE)  
RFFIS  
#9.1% OOB estimate of error rate  
#ntree=500  
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power  
pre.or <- sort(RFFIS$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable 
pre.or  
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score  
varImpPlot(RFFIS, main="")
```

-   Strongest predictors

    -   year

    -   Tetracycline

##### Prediction on Training Data

```{r}
set.seed(71)
trainRFFIS_prediction<- predict(RFFIS,over.FIS.RF.df)   
trainconMatFISRF<-confusionMatrix(trainRFFIS_prediction, over.FIS.RF.df$FIS)
trainconMatFISRF$table  
paste('Accuracy =', round(trainconMatFISRF$overall["Accuracy"],2)) #returns accuracy
trainconMatFISRF$overall #also gives accuracy in output in scientific notation   #accuracy is now 93% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
testRFFIS_prediction<-predict(RFFIS,testFISRF) 
testConMatFISRF<-confusionMatrix(testRFFIS_prediction,testFISRF$FIS) 
paste('Accuracy =', round(testConMatFISRF$overall["Accuracy"],2)) #returns accuracy #accuracy is 66% on test data   

FIS_RF_ConMat<-testConMatFISRF$table  #saves just the confusion matrix as an object for future analysis 

testConMatFISRF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(FIS_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |            |
|-----|------------|
| 16  | 0.66330489 |
| 32  | 0.41690141 |
| 64  | 0.06666667 |
| 128 | 0.00000000 |
| 256 | 0.85639687 |

##### Balanced Accuracy:

```{r}
FIS_RF_AccStats<-testConMatFISRF$byClass      
Balanced.Accuracy<-data.matrix(FIS_RF_AccStats[,"Balanced Accuracy"])     
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|                |           |
|---------------:|-----------|
|  **Class: 16** | 0.6795360 |
|  **Class: 32** | 0.6023748 |
|  **Class: 64** | 0.5158582 |
| **Class: 128** | 0.4989493 |
| **Class: 256** | 0.9007501 |

##### Plus or Minus One Accuracy:

```{r}
PlusorMinus1_ConMat_Accuracy(FIS_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 16  | 0.9049651 |
| 32  | 0.9436620 |
| 64  | 0.3333333 |
| 128 | 0.0000000 |
| 256 | 0.8590078 |

```{r}
PlusorMinus1_overall(FIS_RF_ConMat)
```

#Breakpoint Classification Accuracy and Major and Minor Error Cannot be computed since the NARMS breakpoint value is at the end boundary (all isolates are susceptible)

### BEST MODEL: Mix of Under and Over

##### Build RF using Training Data:

```{r}
set.seed(71)  
final_RFFIS<-randomForest(FIS~Year+AMC+AXO+CHL+CIP+COT+FOX+GEN+NAL+TET+AMP, data=under_over.FIS.RF.df, na.action=na.exclude, ntree=500, importance=TRUE)  
final_RFFIS  
#26% OOB estimate of error rate  
#ntree=500  
#mtry=3 (number of variables tried at each split)
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power   
pre.or <- sort(final_RFFIS$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable  
pre.or   
remove(pre.or)    

#return a plot showing the importance of a predictor to the model by accuracy and Gini score   
varImpPlot(final_RFFIS, main="")
```

-   Strongest predictors

    year

    tetracycline

##### Prediction on Training Data

```{r}
set.seed(71)
final_trainRFFIS_prediction<- predict(final_RFFIS,under_over.FIS.RF.df)   
final_trainconMatFISRF<-confusionMatrix(final_trainRFFIS_prediction, under_over.FIS.RF.df$FIS)
final_trainconMatFISRF$table  
paste('Accuracy =', round(final_trainconMatFISRF$overall["Accuracy"],2)) #returns accuracy
final_trainconMatFISRF$overall #also gives accuracy in output in scientific notation   
#accuracy is now 88% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
final_testRFFIS_prediction<-predict(final_RFFIS,testFISRF) 
final_testConMatFISRF<-confusionMatrix(final_testRFFIS_prediction,testFISRF$FIS) 
paste('Accuracy =', round(final_testConMatFISRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 59% on test data   

final_FIS_RF_ConMat<-final_testConMatFISRF$table  #saves just the confusion matrix as an object for future analysis 

final_testConMatFISRF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(final_FIS_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 16  | 0.5583815 |
| 32  | 0.4911765 |
| 128 | 0.1500000 |
| 256 | 0.9050132 |

##### Balanced Accuracy:

```{r}
FIS_RF_AccStats<-final_testConMatFISRF$byClass      
Balanced.Accuracy<-data.matrix(FIS_RF_AccStats[,"Balanced Accuracy"])     
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|                |           |
|---------------:|-----------|
|  **Class: 16** | 0.6790554 |
|  **Class: 32** | 0.6221747 |
| **Class: 128** | 0.5478425 |
| **Class: 256** | 0.9008992 |

##### Plus or Minus One Accuracy by Category:

```{r}
PlusorMinus1_ConMat_Accuracy(final_FIS_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 16  | 0.8354528 |
| 32  | 0.9000000 |
| 128 | 0.6500000 |
| 256 | 0.9182058 |

##### Plus or Minus One Accuracy Overall:

```{r}
PlusorMinus1_overall(final_FIS_RF_ConMat)
```

#Breakpoint Classification Accuracy and Major and Very Major Error Cannot be computed since all isolates are susceptible by NARMS breakpoints

```{r}
remove(RFFIS, trainconMatFISRF, trainRFFIS_prediction, testRFFIS_prediction, testConMatFISRF, FIS_RF_ConMat, C.perc, FIS_RF_AccStats, Balanced.Accuracy )

remove(over.FIS.RF.df, under_over.FIS.RF.df, final_trainconMatFISRF, final_trainRFFIS_prediction, trainFISRF_labels)
```
