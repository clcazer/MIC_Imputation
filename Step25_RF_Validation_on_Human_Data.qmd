---
title: "RF Validation on Human Data"
format: html
editor: visual
---

### RFAMC Prediction on Human Data

```{r}
AMC.Human.df<- Human_clinical_ordinal

#checking if there are any NAs for AMC variable in this dataframe  
(sum(is.na(AMC.Human.df[match("AMC",names(AMC.Human.df))]))/nrow(AMC.Human.df)*100) #returns 0.0895%

#further filter dataframe to only include isolates with AMC data 
AMC.Human.df <- AMC.Human.df %>%      
  filter(!is.na(AMC))    

#checking again to see if there are any NAs for AMC in dataframe  
(sum(is.na(AMC.Human.df[match("AMC",names(AMC.Human.df))]))/nrow(AMC.Human.df)*100) #returns 0, so no missing values now

```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainAMCRF$Year) #2002-2019
```

```{r}
table(AMC.Human.df$Year)
```

```{r}
AMC.Human.df$Year[AMC.Human.df$Year==1996]<-2002
AMC.Human.df$Year[AMC.Human.df$Year==1997]<-2002
AMC.Human.df$Year[AMC.Human.df$Year==1998]<-2002
AMC.Human.df$Year[AMC.Human.df$Year==1999]<-2002
AMC.Human.df$Year[AMC.Human.df$Year==2000]<-2002
AMC.Human.df$Year[AMC.Human.df$Year==2001]<-2002

AMC.Human.df$Year[AMC.Human.df$Year=="2019*"]<-2019
AMC.Human.df$Year[AMC.Human.df$Year=="2020*"]<-2019
AMC.Human.df$Year[AMC.Human.df$Year=="2021*"]<-2019
AMC.Human.df$Year[AMC.Human.df$Year=="2022*"]<-2019
AMC.Human.df$Year[AMC.Human.df$Year=="2023*"]<-2019

table(AMC.Human.df$Year)
```

```{r}
AMC.Human.df$Year<- as.factor(AMC.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanAMC_prediction<-predict(final_RFAMC,AMC.Human.df) 
HumanAMCConMatRF<-confusionMatrix(HumanAMC_prediction,AMC.Human.df$AMC) 
paste('Accuracy =', round(HumanAMCConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 42% on Human data   

AMC_Human_ConMat<-HumanAMCConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanAMCConMatRF
```

```{r}
PlusorMinus1_overall(AMC_Human_ConMat)
```

### RFAMI Prediction on Human Data

```{r}
AMI.Human.df<- Human_clinical_ordinal

#checking if there are any NAs for AMI variable in this dataframe  
(sum(is.na(AMI.Human.df[match("AMI",names(AMI.Human.df))]))/nrow(AMI.Human.df)*100) #returns 66.284  

#further filter dataframe to only include isolates with AMI data 
AMI.Human.df <- AMI.Human.df %>%      
  filter(!is.na(AMI))    

#checking again to see if there are any NAs for AMI in dataframe  
(sum(is.na(AMI.Human.df[match("AMI",names(AMI.Human.df))]))/nrow(AMI.Human.df)*100) #returns 0, so no missing values now
```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
#levels for year in training data
table(trainAMIRF$Year)
```

```{r}
#levels for year currently in external data (Human)
table(AMI.Human.df$Year)
```

```{r}
AMI.Human.df$Year[AMI.Human.df$Year==1996]<-2004
AMI.Human.df$Year[AMI.Human.df$Year==1997]<-2004
AMI.Human.df$Year[AMI.Human.df$Year==1998]<-2004
AMI.Human.df$Year[AMI.Human.df$Year==1999]<-2004
AMI.Human.df$Year[AMI.Human.df$Year==2000]<-2004
AMI.Human.df$Year[AMI.Human.df$Year==2001]<-2004
AMI.Human.df$Year[AMI.Human.df$Year==2002]<-2004
AMI.Human.df$Year[AMI.Human.df$Year==2003]<-2004


table(AMI.Human.df$Year)
```

```{r}
AMI.Human.df$Year<- as.factor(AMI.Human.df$Year) #make year a factor to match data structure in training dataframe
```

```{r}
#re-add level 16 as an "empty level" so that levels in human data match those in training data
AMI.Human.df$AMI<- ordered(AMI.Human.df$AMI, levels= c(1,2,4,8,16))
table(AMI.Human.df$AMI)
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanAMI_prediction<-predict(final_RFAMI,AMI.Human.df) 
HumanAMIConMatRF<-confusionMatrix(HumanAMI_prediction,AMI.Human.df$AMI) 
paste('Accuracy =', round(HumanAMIConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 57% on Human data   

AMI_Human_ConMat<-HumanAMIConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanAMIConMatRF
```

```{r}
PlusorMinus1_overall(AMI_Human_ConMat)
```

### RFAMP Prediction on Human Data

```{r}
AMP.Human.df<- Human_clinical_ordinal

#checking if there are any NAs for AMP variable in this dataframe  
(sum(is.na(AMP.Human.df[match("AMP",names(AMP.Human.df))]))/nrow(AMP.Human.df)*100) #returns ~10.41%  

#further filter dataframe to only include isolates with AMP data 
AMP.Human.df <- AMP.Human.df %>%      
  filter(!is.na(AMP))    

#checking again to see if there are any NAs for AMP in dataframe  
(sum(is.na(AMP.Human.df[match("AMP",names(AMP.Human.df))]))/nrow(AMP.Human.df)*100) #returns 0, so no missing values now
```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainAMPRF$Year) #2002-2019
```

```{r}
table(AMP.Human.df$Year)
```

```{r}
AMP.Human.df$Year[AMP.Human.df$Year==1996]<-2002
AMP.Human.df$Year[AMP.Human.df$Year==1997]<-2002
AMP.Human.df$Year[AMP.Human.df$Year==1998]<-2002
AMP.Human.df$Year[AMP.Human.df$Year==1999]<-2002
AMP.Human.df$Year[AMP.Human.df$Year==2000]<-2002
AMP.Human.df$Year[AMP.Human.df$Year==2001]<-2002

AMP.Human.df$Year[AMP.Human.df$Year=="2019*"]<-2019
AMP.Human.df$Year[AMP.Human.df$Year=="2020*"]<-2019
AMP.Human.df$Year[AMP.Human.df$Year=="2021*"]<-2019
AMP.Human.df$Year[AMP.Human.df$Year=="2022*"]<-2019
AMP.Human.df$Year[AMP.Human.df$Year=="2023*"]<-2019

table(AMP.Human.df$Year)
```

```{r}
AMP.Human.df$Year<- as.factor(AMP.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanAMP_prediction<-predict(final_RFAMP,AMP.Human.df) 
HumanAMPConMatRF<-confusionMatrix(HumanAMP_prediction,AMP.Human.df$AMP) 
paste('Accuracy =', round(HumanAMPConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 30% on Human data   

AMP_Human_ConMat<-HumanAMPConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanAMPConMatRF
```

```{r}
PlusorMinus1_overall(AMP_Human_ConMat)
```

### RF CHL Prediction on Human Data

```{r}
CHL.Human.df<- Human_clinical_ordinal

#checking if there are any NAs for CHL variable in this dataframe  
(sum(is.na(CHL.Human.df[match("CHL",names(CHL.Human.df))]))/nrow(CHL.Human.df)*100) #returns 19.77%  

#further filter dataframe to only include isolates with CHL data 
CHL.Human.df <- CHL.Human.df %>%      
  filter(!is.na(CHL))    

#checking again to see if there are any NAs for CHL in dataframe  
(sum(is.na(CHL.Human.df[match("CHL",names(CHL.Human.df))]))/nrow(CHL.Human.df)*100) #returns 0, so no missing values now
```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainCHLRF$Year) #2002-2019
```

```{r}
table(CHL.Human.df$Year)
```

```{r}
CHL.Human.df$Year[CHL.Human.df$Year==1996]<-2002
CHL.Human.df$Year[CHL.Human.df$Year==1997]<-2002
CHL.Human.df$Year[CHL.Human.df$Year==1998]<-2002
CHL.Human.df$Year[CHL.Human.df$Year==1999]<-2002
CHL.Human.df$Year[CHL.Human.df$Year==2000]<-2002
CHL.Human.df$Year[CHL.Human.df$Year==2001]<-2002

CHL.Human.df$Year[CHL.Human.df$Year=="2019*"]<-2019
CHL.Human.df$Year[CHL.Human.df$Year=="2020*"]<-2019
CHL.Human.df$Year[CHL.Human.df$Year=="2021*"]<-2019
CHL.Human.df$Year[CHL.Human.df$Year=="2022*"]<-2019
CHL.Human.df$Year[CHL.Human.df$Year=="2023*"]<-2019

table(CHL.Human.df$Year)
```

```{r}
CHL.Human.df$Year<- as.factor(CHL.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanCHL_prediction<-predict(final_RFCHL,CHL.Human.df) 
HumanCHLConMatRF<-confusionMatrix(HumanCHL_prediction,CHL.Human.df$CHL) 
paste('Accuracy =', round(HumanCHLConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 40% on Human data   

CHL_Human_ConMat<-HumanCHLConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanCHLConMatRF
```

```{r}
PlusorMinus1_overall(CHL_Human_ConMat)
```

### RF CIP Prediction on Human Data

```{r}
CIP.Human.df<- Human_clinical_ordinal

#checking if there are any NAs for CIP variable in this dataframe  
(sum(is.na(CIP.Human.df[match("CIP",names(CIP.Human.df))]))/nrow(CIP.Human.df)*100) #returns ~3.457%

#further filter dataframe to only include isolates with CIP data 
CIP.Human.df <- CIP.Human.df %>%      
  filter(!is.na(CIP))    

#checking again to see if there are any NAs for CIP in dataframe  
(sum(is.na(CIP.Human.df[match("CIP",names(CIP.Human.df))]))/nrow(CIP.Human.df)*100) #returns 0, so no missing values now

```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainCIPRF$Year) #2002-2019
```

```{r}
#CIP.Human.df <- CIP.Human.df %>%      
  #filter(Year>2001 & Year<2020) 
table(CIP.Human.df$Year)
```

```{r}
CIP.Human.df$Year[CIP.Human.df$Year==1996]<-2002
CIP.Human.df$Year[CIP.Human.df$Year==1997]<-2002
CIP.Human.df$Year[CIP.Human.df$Year==1998]<-2002
CIP.Human.df$Year[CIP.Human.df$Year==1999]<-2002
CIP.Human.df$Year[CIP.Human.df$Year==2000]<-2002
CIP.Human.df$Year[CIP.Human.df$Year==2001]<-2002

CIP.Human.df$Year[CIP.Human.df$Year=="2019*"]<-2019
CIP.Human.df$Year[CIP.Human.df$Year=="2020*"]<-2019
CIP.Human.df$Year[CIP.Human.df$Year=="2021*"]<-2019
CIP.Human.df$Year[CIP.Human.df$Year=="2022*"]<-2019
CIP.Human.df$Year[CIP.Human.df$Year=="2023*"]<-2019

table(CIP.Human.df$Year)
```

```{r}
CIP.Human.df$Year<- as.factor(CIP.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanCIP_prediction<-predict(final_RFCIP,CIP.Human.df) 
HumanCIPConMatRF<-confusionMatrix(HumanCIP_prediction,CIP.Human.df$CIP) 
paste('Accuracy =', round(HumanCIPConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 77% on Human data   

CIP_Human_ConMat<-HumanCIPConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanCIPConMatRF
```

```{r}
PlusorMinus1_overall(CIP_Human_ConMat)
```

### RF COT Prediction on Human data:

```{r}
COT.Human.df<- Human_clinical_ordinal

#checking if there are any NAs for COT variable in this dataframe  
(sum(is.na(COT.Human.df[match("COT",names(COT.Human.df))]))/nrow(COT.Human.df)*100) #returns 0%

```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainCOTRF$Year) #2002-2019
```

```{r}
table(COT.Human.df$Year) #matches year range in training data
```

```{r}
COT.Human.df$Year[COT.Human.df$Year==1996]<-2002
COT.Human.df$Year[COT.Human.df$Year==1997]<-2002
COT.Human.df$Year[COT.Human.df$Year==1998]<-2002
COT.Human.df$Year[COT.Human.df$Year==1999]<-2002
COT.Human.df$Year[COT.Human.df$Year==2000]<-2002
COT.Human.df$Year[COT.Human.df$Year==2001]<-2002

COT.Human.df$Year[COT.Human.df$Year=="2019*"]<-2019
COT.Human.df$Year[COT.Human.df$Year=="2020*"]<-2019
COT.Human.df$Year[COT.Human.df$Year=="2021*"]<-2019
COT.Human.df$Year[COT.Human.df$Year=="2022*"]<-2019
COT.Human.df$Year[COT.Human.df$Year=="2023*"]<-2019

table(COT.Human.df$Year)
```

```{r}
COT.Human.df$Year<- as.factor(COT.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanCOT_prediction<-predict(final_RFCOT,COT.Human.df) 
HumanCOTConMatRF<-confusionMatrix(HumanCOT_prediction,COT.Human.df$COT) 
paste('Accuracy =', round(HumanCOTConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 83% on Human data   

COT_Human_ConMat<-HumanCOTConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanCOTConMatRF
```

```{r}
PlusorMinus1_overall(COT_Human_ConMat)
```

### RF FIS Prediction on Human data:

```{r}
FIS.Human.df<- Human_clinical_ordinal

#checking if there are any NAs for FIS variable in this dataframe  
(sum(is.na(FIS.Human.df[match("FIS",names(FIS.Human.df))]))/nrow(FIS.Human.df)*100) #returns ~39.63%  

#further filter dataframe to only include isolates with FIS data 
FIS.Human.df <- FIS.Human.df %>%      
  filter(!is.na(FIS))    

#checking again to see if there are any NAs for FIS in dataframe  
(sum(is.na(FIS.Human.df[match("FIS",names(FIS.Human.df))]))/nrow(FIS.Human.df)*100) #returns 0, so no missing values now
```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainFISRF$Year) #2004-2019
```

```{r}
table(FIS.Human.df$Year) #matches year range in training data
```

```{r}
FIS.Human.df$Year[FIS.Human.df$Year=="2019*"]<-2019
FIS.Human.df$Year[FIS.Human.df$Year=="2020*"]<-2019
FIS.Human.df$Year[FIS.Human.df$Year=="2021*"]<-2019
FIS.Human.df$Year[FIS.Human.df$Year=="2022*"]<-2019
FIS.Human.df$Year[FIS.Human.df$Year=="2023*"]<-2019

table(FIS.Human.df$Year)
```

```{r}
FIS.Human.df$Year<- as.factor(FIS.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanFIS_prediction<-predict(final_RFFIS,FIS.Human.df) 
HumanFISConMatRF<-confusionMatrix(HumanFIS_prediction,FIS.Human.df$FIS) 
paste('Accuracy =', round(HumanFISConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 50% on Human data   

FIS_Human_ConMat<-HumanFISConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanFISConMatRF
```

```{r}
PlusorMinus1_overall(FIS_Human_ConMat)
```

### RF FOX Prediction on Human Data:

```{r}
FOX.Human.df<- Human_clinical_ordinal  

#checking if there are any NAs for FOX variable in this dataframe   
(sum(is.na(FOX.Human.df[match("FOX",names(FOX.Human.df))]))/nrow(FOX.Human.df)*100) #returns 28.14%

#further filter dataframe to only include isolates with FOX data 
FOX.Human.df <- FOX.Human.df %>%      
  filter(!is.na(FOX))    

#checking again to see if there are any NAs for FOX in dataframe  
(sum(is.na(FOX.Human.df[match("FOX",names(FOX.Human.df))]))/nrow(FOX.Human.df)*100) #returns 0, so no missing values now

```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainFOXRF$Year) #2002-2019
```

```{r}
table(FOX.Human.df$Year) #matches year range in training data
```

```{r}
FOX.Human.df$Year[FOX.Human.df$Year==1996]<-2002
FOX.Human.df$Year[FOX.Human.df$Year==1997]<-2002
FOX.Human.df$Year[FOX.Human.df$Year==1998]<-2002
FOX.Human.df$Year[FOX.Human.df$Year==1999]<-2002
FOX.Human.df$Year[FOX.Human.df$Year==2000]<-2002
FOX.Human.df$Year[FOX.Human.df$Year==2001]<-2002

FOX.Human.df$Year[FOX.Human.df$Year=="2019*"]<-2019
FOX.Human.df$Year[FOX.Human.df$Year=="2020*"]<-2019
FOX.Human.df$Year[FOX.Human.df$Year=="2021*"]<-2019
FOX.Human.df$Year[FOX.Human.df$Year=="2022*"]<-2019
FOX.Human.df$Year[FOX.Human.df$Year=="2023*"]<-2019

table(FOX.Human.df$Year)
```

```{r}
FOX.Human.df$Year<- as.factor(FOX.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanFOX_prediction<-predict(final_RFFOX,FOX.Human.df) 
HumanFOXConMatRF<-confusionMatrix(HumanFOX_prediction,FOX.Human.df$FOX) 
paste('Accuracy =', round(HumanFOXConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 36% on Human data   

FOX_Human_ConMat<-HumanFOXConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanFOXConMatRF
```

```{r}
PlusorMinus1_overall(FOX_Human_ConMat)
```

### RF TET Prediction on Human Data:

```{r}
TET.Human.df<- Human_clinical_ordinal  

#checking if there are any NAs for TET variable in this dataframe   
(sum(is.na(TET.Human.df[match("TET",names(TET.Human.df))]))/nrow(TET.Human.df)*100) #returns ~4.94%

#further filter dataframe to only include isolates with TET data 
TET.Human.df <- TET.Human.df %>%      
  filter(!is.na(TET))    

#checking again to see if there are any NAs for TET in dataframe  
(sum(is.na(TET.Human.df[match("TET",names(TET.Human.df))]))/nrow(TET.Human.df)*100) #returns 0, so no missing values now

```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainTETRF$Year) #2002-2019
```

```{r}
table(TET.Human.df$Year)
```

```{r}
TET.Human.df$Year[TET.Human.df$Year==1996]<-2002
TET.Human.df$Year[TET.Human.df$Year==1997]<-2002
TET.Human.df$Year[TET.Human.df$Year==1998]<-2002
TET.Human.df$Year[TET.Human.df$Year==1999]<-2002
TET.Human.df$Year[TET.Human.df$Year==2000]<-2002
TET.Human.df$Year[TET.Human.df$Year==2001]<-2002

TET.Human.df$Year[TET.Human.df$Year=="2019*"]<-2019
TET.Human.df$Year[TET.Human.df$Year=="2020*"]<-2019
TET.Human.df$Year[TET.Human.df$Year=="2021*"]<-2019
TET.Human.df$Year[TET.Human.df$Year=="2022*"]<-2019
TET.Human.df$Year[TET.Human.df$Year=="2023*"]<-2019

table(TET.Human.df$Year)
```

```{r}
TET.Human.df$Year<- as.factor(TET.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanTET_prediction<-predict(final_RFTET,TET.Human.df) 
HumanTETConMatRF<-confusionMatrix(HumanTET_prediction,TET.Human.df$TET) 
paste('Accuracy =', round(HumanTETConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 65% on human data   

TET_Human_ConMat<-HumanTETConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanTETConMatRF
```

```{r}
PlusorMinus1_overall(TET_Human_ConMat)
```

### RF TIO Prediction on Human Data:

```{r}
TIO.Human.df<- Human_clinical_ordinal  

#checking if there are any NAs for TIO variable in this dataframe   
(sum(is.na(TIO.Human.df[match("TIO",names(TIO.Human.df))]))/nrow(TIO.Human.df)*100) #returns 48.15478%

#further filter dataframe to only include isolates with TIO data 
TIO.Human.df <- TIO.Human.df %>%      
  filter(!is.na(TIO))    

#checking again to see if there are any NAs for TIO in dataframe  
(sum(is.na(TIO.Human.df[match("TIO",names(TIO.Human.df))]))/nrow(TIO.Human.df)*100) #returns 0, so no missing values now
```

##### Match external data (Human)'s predictor variable structure to training data

```{r}
table(trainTIORF$Year) #2002-2015
```

```{r}
table(TIO.Human.df$Year) #matches year range in training data
```

```{r}
TIO.Human.df$Year[TIO.Human.df$Year==1996]<-2002
TIO.Human.df$Year[TIO.Human.df$Year==1997]<-2002
TIO.Human.df$Year[TIO.Human.df$Year==1998]<-2002
TIO.Human.df$Year[TIO.Human.df$Year==1999]<-2002
TIO.Human.df$Year[TIO.Human.df$Year==2000]<-2002
TIO.Human.df$Year[TIO.Human.df$Year==2001]<-2002

table(TIO.Human.df$Year)
```

```{r}
TIO.Human.df$Year<- as.factor(TIO.Human.df$Year) #make year a factor to match data structure in training dataframe
```

##### **Prediction on Human Data**

```{r}
set.seed(71)
HumanTIO_prediction<-predict(final_RFTIO,TIO.Human.df) 
HumanTIOConMatRF<-confusionMatrix(HumanTIO_prediction,TIO.Human.df$TIO) 
paste('Accuracy =', round(HumanTIOConMatRF$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 37% on human data 

TIO_Human_ConMat<-HumanTIOConMatRF$table  #saves just the confusion matrix as an object for future analysis 

HumanTIOConMatRF
```

```{r}
PlusorMinus1_overall(TIO_Human_ConMat)
```

Below is a test to see if RF prediction works if external dataframe has a different number of columns than training dataframe, but still has all predictor variables

```{r}
TIO.Human.df_test<- TIO.Human.df%>%
  select(Year, AXO, CIP, FOX, NAL, AMC, CHL, COT, GEN, TET, AMP, TIO)

```

```{r}
set.seed(71)
HumanTIO_prediction_test<-predict(final_RFTIO,TIO.Human.df_test) 
HumanTIOConMatRF_test<-confusionMatrix(HumanTIO_prediction_test,TIO.Human.df_test$TIO) 
paste('Accuracy =', round(HumanTIOConMatRF_test$overall["Accuracy"],2)) #returns accuracy 
#accuracy is 37% on test data   

TIO_Human_ConMat_test<-HumanTIOConMatRF_test$table  #saves just the confusion matrix as an object for future analysis 

HumanTIOConMatRF_test
```
