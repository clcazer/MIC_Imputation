---
title: "Model_for_Each_CLSI_Class"
format: html
editor: visual
---

# Amikacin (AMI)

-   CLSI Class: aminoglycoside

    ## Filtering Amikacin isolates

    ##### Filtering Amikacin isolates from 2004-2019 into a separate dataframe to build RF

    ```{r}
    AMI.RF.df <- NARMSCattleCombined_ordinal %>%      
      filter(Year>2003)    

    #checking if there are any NAs for AMI variable in this dataframe  
    (sum(is.na(AMI.RF.df[22]))/nrow(AMI.RF.df)*100) #returns 82.27%  

    #further filter dataframe to only include isolates with AMI data 
    AMI.RF.df <- AMI.RF.df %>%      
      filter(!is.na(AMI))    

    #checking again to see if there are any NAs for AMI in dataframe  
    (sum(is.na(AMI.RF.df[22]))/nrow(AMI.RF.df)*100) #returns 0, so no missing values now
    ```

    ##### Check dependent variable (what predicting) is a factor in dataframe

    ```{r}
    is.factor(AMI.RF.df$AMI) #returns true
    ```

    ##### Make all categorical variables in dataframe factors

    ```{r}
    CategoricalVar<-c("STATE", "Year", "Month", "RAISING_CLAIM", "COUNTRY_OF_ORIGIN", "SOURCE", "SOURCE_SPECIES_INFO", "BRAND", "BRAND_NAME", "dataset_source", "MEAT_TYPE", "HOST_SPECIES")  

    AMI.RF.df[CategoricalVar]<-lapply(AMI.RF.df[CategoricalVar], factor) 

    remove(CategoricalVar)  
    #Resist.Genes variables (ex: Aminoglycoside.Resist.Genes), GENOTYPE were not included in model because majority of isolates do not have this information 
    ```

    ## Missing Data Analysis for Antimicrobials

    ##### For each AM, what percentage of total number of isolates were tested against that AM

    ```{r}
    MissingDataAnalysis_AMs(AMI.RF.df)
    ```

|         |               |
|---------|---------------|
| **AMC** | **100.00000** |
| AMI     | 100.00000     |
| **AXO** | **100.00000** |
| **CHL** | **100.00000** |
| **CIP** | **100.00000** |
| **COT** | **100.00000** |
| **FIS** | **100.00000** |
| **FOX** | **100.00000** |
| **GEN** | **100.00000** |
| **KAN** | **100.00000** |
| **NAL** | **100.00000** |
| **TET** | **100.00000** |
| **TIO** | **100.00000** |
| **AMP** | **99.94926**  |
| Str     | 99.94926      |
| APR     | 0.00000       |
| ATM     | 0.00000       |
| AZI     | 0.00000       |
| CAZ     | 0.00000       |
| CEP     | 0.00000       |
| CLI     | 0.00000       |
| CTX     | 0.00000       |
| DAP     | 0.00000       |
| DOX     | 0.00000       |
| ERY     | 0.00000       |
| FEP     | 0.00000       |
| FFN     | 0.00000       |
| IMI     | 0.00000       |
| LIN     | 0.00000       |
| LZD     | 0.00000       |
| MER     | 0.00000       |
| NIT     | 0.00000       |
| PEN     | 0.00000       |
| PTZ     | 0.00000       |
| QDA     | 0.00000       |
| SMX     | 0.00000       |
| TEL     | 0.00000       |
| TGC     | 0.00000       |
| TYL     | 0.00000       |
| VAN     | 0.00000       |

13 predictor variables tested on \>90% isolates and so can be used in model (not using Str because of change in concentrations tested over time)

## Missing Data Analysis for Categorical Variables

##### For each categorical variable, what percentage of total number of isolates were tested against that variable

```{r}
MissingDataAnalysis_CategoricalVar(AMI.RF.df)
```

| **Variable Name** | **Percent_of_Isolates_Tested** |
|:------------------|:-------------------------------|

|                     |               |
|---------------------|---------------|
| **STATE**           | **100.00000** |
| Month               | 100.00000     |
| **Year**            | **100.00000** |
| **dataset_source**  | **100.00000** |
| **SOURCE**          | **100.00000** |
| GROWTH              | 100.00000     |
| **HOST_SPECIES**    | **100.00000** |
| **MEAT_TYPE**       | **100.00000** |
| ACQUISITION_DATE    | 99.69559      |
| BRAND_NAME          | 89.75140      |
| BRAND               | 88.12785      |
| SOURCE_SPECIES_INFO | 34.24658      |
| CUTS                | 34.09437      |
| RAISING_CLAIM       | 0.00000       |
| COUNTRY_OF_ORIGIN   | 0.00000       |
| GENOTYPE            | 0.00000       |

##### Checking Levels for Categorical Variables with 90% plus data:

```{r}
levels(AMI.RF.df$Year)
```

```{r}
levels(AMI.RF.df$dataset_source)
```

```{r}
levels(AMI.RF.df$SOURCE)
```

```{r}
levels(AMI.RF.df$HOST_SPECIES)
```

```{r}
levels(AMI.RF.df$MEAT_TYPE)
```

```{r}
levels(AMI.RF.df$STATE)
```

Possible Categorical Variable Predictor Variables: (have enough data filled in and have unique levels)

-   Year
-   STATE

## Create 70% Training 30% Testing Split

```{r}
#set a random seed and shuffle data frame to get random sample of data in both the testing and training set   
set.seed(1234)   
AMI.RF.df<-AMI.RF.df[sample(1:nrow(AMI.RF.df)), ]
```

```{r}
#use 70% data for training and other 30% for testing

# get the number 70/30 training test split   
numberOfTrainingSamples <- round(length(AMI.RF.df$AMI) * .7)

# training data   
set.seed(1234)   
trainAMIRF <- AMI.RF.df[1:numberOfTrainingSamples,]  
trainAMIRF_labels <- AMI.RF.df$AMI[1:numberOfTrainingSamples]

# testing data  
set.seed(1234)  
testAMIRF <- AMI.RF.df[-(1:numberOfTrainingSamples),]   
testAMIRF_labels <-AMI.RF.df$AMI[-(1:numberOfTrainingSamples)] 

remove(numberOfTrainingSamples)
```

## Balancing AMI Levels

##### Look at original training data distribution

```{r}
table(trainAMIRF$AMI)
```

##### Try oversampling

```{r}
#Oversample to balance all MIC categories  
set.seed(71)
over.AMI.RF.df<- RandOverClassif(AMI~., trainAMIRF, "balance")  #"balance" tries to balance all existing classes    

table(over.AMI.RF.df$AMI) #This oversamples other categories so that there are 886 rows (number of observations of majority category) for each
```

##### Try a mix of undersampling and oversampling

```{r}
#Undersample MIC category 2  
C.perc= list("2"=0.125, "4"= 0.3)
set.seed(71)
under_over.AMI.RF.df<- RandUnderClassif(AMI~., trainAMIRF, C.perc)   
table(under_over.AMI.RF.df$AMI) #first undersample  

#Oversample MIC category 8,16  
C.perc= list("8"=2, "16"=50) 
set.seed(71)
under_over.AMI.RF.df<- RandOverClassif(AMI~., under_over.AMI.RF.df, C.perc)   
table(under_over.AMI.RF.df$AMI) #then oversample
```

## Random Forest:

### Original

##### Build RF using Training Data:

```{r}
set.seed(71)  
RFAMI<-randomForest(AMI~Year+AMC+AXO+CHL+CIP+COT+FIS+FOX+GEN+KAN+NAL+TET+TIO+AMP, data=trainAMIRF, na.action=na.exclude, ntree=500, importance=TRUE)  
RFAMI  
#35% OOB estimate of error rate  
#ntree=500  
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power  
pre.or <- sort(RFAMI$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable 
pre.or  
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score  
varImpPlot(RFAMI, main="")
```

-   Strongest predictors

    -   Gentamycin (another aminoglycoside)

##### Prediction on Training Data

```{r}
set.seed(71)
trainRFAMI_prediction<- predict(RFAMI,trainAMIRF)   
trainconMatAMIRF<-confusionMatrix(trainRFAMI_prediction, trainAMIRF$AMI)
trainconMatAMIRF$table  
paste('Accuracy =', round(trainconMatAMIRF$overall["Accuracy"],2)) #returns accuracy
trainconMatAMIRF$overall #also gives accuracy in output in scientific notation   #accuracy is now 82% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
testRFAMI_prediction<-predict(RFAMI,testAMIRF) 
testConMatAMIRF<-confusionMatrix(testRFAMI_prediction,testAMIRF$AMI) 
paste('Accuracy =', round(testConMatAMIRF$overall["Accuracy"],2)) #returns accuracy #accuracy is 69% on test data   
AMI_RF_ConMat<-testConMatAMIRF$table  #saves just the confusion matrix as an object for future analysis 
testConMatAMIRF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(AMI_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 1   | 0.2631579 |
| 2   | 0.8780488 |
| 4   | 0.3355705 |
| 8   | 0.1428571 |
| 16  | 0.0000000 |

##### Balanced Accuracy:

```{r}
AMI_RF_AccStats<-testConMatAMIRF$byClass      
Balanced.Accuracy<-data.matrix(AMI_RF_AccStats[,"Balanced Accuracy"])     
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|               |           |
|--------------:|-----------|
|  **Class: 1** | 0.6278336 |
|  **Class: 2** | 0.5989343 |
|  **Class: 4** | 0.6168803 |
|  **Class: 8** | 0.5714286 |
| **Class: 16** | 0.5000000 |

##### Plus or Minus One Accuracy:

```{r}
PlusorMinus1_ConMat_Accuracy(AMI_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 1   | 0.9824561 |
| 2   | 1.0000000 |
| 4   | 0.9932886 |
| 8   | 0.2857143 |
| 16  | 0.0000000 |

```{r}
PlusorMinus1_overall(AMI_RF_ConMat)
```

#Breakpoint Classification Accuracy and Major and Minor Error Cannot be computed since the all isolates are susceptible according to NARMS boundaries

### Oversampling

##### Build RF using Training Data:

```{r}
set.seed(71)   
RFAMI<-randomForest(AMI~Year+AMC+AXO+CHL+CIP+COT+FIS+FOX+GEN+KAN+NAL+TET+TIO+AMP, data=over.AMI.RF.df, na.action=na.exclude, ntree=500, importance=TRUE)   
RFAMI   
#13.48% OOB estimate of error rate   
#ntree=500   
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power   
pre.or <- sort(RFAMI$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable  
pre.or   
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score   
varImpPlot(RFAMI, main="")
```

-   Strongest predictors

    -   year

    -   Gentamycin (another aminoglycoside)

##### Prediction on Training Data

```{r}
set.seed(71)
trainRFAMI_prediction<- predict(RFAMI,over.AMI.RF.df)    
trainconMatAMIRF<-confusionMatrix(trainRFAMI_prediction, over.AMI.RF.df$AMI)
trainconMatAMIRF$table   

#returns accuracy 
trainconMatAMIRF$overall #also gives accuracy in output in scientific notation   #accuracy is now 92% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
testRFAMI_prediction<-predict(RFAMI,testAMIRF)  
testConMatAMIRF<-confusionMatrix(testRFAMI_prediction,testAMIRF$AMI)  
paste('Accuracy =', round(testConMatAMIRF$overall["Accuracy"],2)) #returns accuracy #accuracy is 52% on test data    
AMI_RF_ConMat<-testConMatAMIRF$table  #saves just the confusion matrix as an object for future analysis
   
testConMatAMIRF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(AMI_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 1   | 0.4561404 |
| 2   | 0.5636856 |
| 4   | 0.5167785 |
| 8   | 0.2142857 |
| 16  | 0.0000000 |

##### Balanced Accuracy:

```{r}
AMI_RF_AccStats<-testConMatAMIRF$byClass       
Balanced.Accuracy<-data.matrix(AMI_RF_AccStats[,"Balanced Accuracy"])      
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|               |           |
|--------------:|-----------|
|  **Class: 1** | 0.6643998 |
|  **Class: 2** | 0.5949059 |
|  **Class: 4** | 0.6543169 |
|  **Class: 8** | 0.5785467 |
| **Class: 16** | 0.4991511 |

##### Plus or Minus One Accuracy:

```{r}
PlusorMinus1_ConMat_Accuracy(AMI_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 1   | 0.9649123 |
| 2   | 0.9512195 |
| 4   | 0.9261745 |
| 8   | 0.5000000 |
| 16  | 0.5000000 |

```{r}
PlusorMinus1_overall(AMI_RF_ConMat)
```

#Breakpoint Classification Accuracy and Major and Minor Error Cannot be computed since all isolates are susceptible by NARMS breakpoints

### BEST MODEL: Mix of Under and Over

##### Build RF using Training Data:

```{r}
set.seed(71)   
final_RFAMI<-randomForest(AMI~Year+AMC+AXO+CHL+CIP+COT+FIS+FOX+GEN+KAN+NAL+TET+TIO+AMP, data=under_over.AMI.RF.df, na.action=na.exclude, ntree=500, importance=TRUE)   

final_RFAMI   
#31% OOB estimate of error rate   
#ntree=500   
#mtry=3 (number of variables tried at each split)  
```

##### Tune Predictor Variables

```{r}
##check the order of the predictors in the model's prediction power   
pre.or <- sort(final_RFAMI$importance[,3], decreasing = TRUE) #adding [,3] gives the power with the title of the variable  
pre.or   
remove(pre.or)   
#return a plot showing the importance of a predictor to the model by accuracy and Gini score   
varImpPlot(final_RFAMI, main="")
```

-   Strongest predictors

    -   year

        Gentamycin (another aminoglycoside)

##### Prediction on Training Data

```{r}
set.seed(71)
final_trainRFAMI_prediction<- predict(final_RFAMI,under_over.AMI.RF.df)    
final_trainconMatAMIRF<-confusionMatrix(final_trainRFAMI_prediction, under_over.AMI.RF.df$AMI)
final_trainconMatAMIRF$table   

final_trainconMatAMIRF$overall #also gives accuracy in output in scientific notation   #accuracy is now 94% on training data
```

##### Prediction on Test Data:

```{r}
set.seed(71)
final_testRFAMI_prediction<-predict(final_RFAMI,testAMIRF)  
final_testConMatAMIRF<-confusionMatrix(final_testRFAMI_prediction,testAMIRF$AMI)  
paste('Accuracy =', round(final_testConMatAMIRF$overall["Accuracy"],2)) #returns accuracy #accuracy is 34% on test data

final_AMI_RF_ConMat<-final_testConMatAMIRF$table  #saves just the confusion matrix as an object for future analysis
 
final_testConMatAMIRF
```

##### Exact Accuracy:

```{r}
ConMat_Accuracy(final_AMI_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 1   | 0.6842105 |
| 2   | 0.2587940 |
| 4   | 0.4963504 |
| 8   | 0.3750000 |
| 16  | 0.0000000 |

##### Balanced Accuracy:

```{r}
set.seed(71)
AMI_RF_AccStats<-final_testConMatAMIRF$byClass       
Balanced.Accuracy<-data.matrix(AMI_RF_AccStats[,"Balanced Accuracy"])      
View(Balanced.Accuracy)
```

| MIC Isolate Category | Balanced Accuracy |
|:---------------------|:------------------|

|               |           |
|--------------:|-----------|
|  **Class: 1** | 0.6890256 |
|  **Class: 2** | 0.5486678 |
|  **Class: 4** | 0.6300736 |
|  **Class: 8** | 0.6195557 |
| **Class: 16** | 0.4983022 |

##### Plus or Minus One Accuracy by Category:

```{r}
PlusorMinus1_ConMat_Accuracy(final_AMI_RF_ConMat)
```

| **MIC isolate category** | **Proportion_of_Isolates** |
|:-------------------------|:---------------------------|

|     |           |
|-----|-----------|
| 1   | 0.8157895 |
| 2   | 0.8668342 |
| 4   | 0.8321168 |
| 8   | 0.7500000 |
| 16  | 1.0000000 |

##### Plus or Minus One Accuracy Overall:

```{r}
PlusorMinus1_overall(final_AMI_RF_ConMat)
```

#Breakpoint Classification Accuracy and Major and Very Major Error Cannot be computed since all isolates are susceptible by NARMS

```{r}
remove(RFAMI, trainconMatAMIRF, trainRFAMI_prediction, testRFAMI_prediction, testConMatAMIRF, AMI_RF_ConMat, C.perc, AMI_RF_AccStats, Balanced.Accuracy )

remove(over.AMI.RF.df, under_over.AMI.RF.df, final_trainconMatAMIRF, final_trainRFAMI_prediction, trainAMIRF_labels)
```
